;;; ==== WORKING DISK MONITORING ====

;; Simple disk monitoring - inject events directly 
(periodically-expire 60
  (fn []
    (info "=== Collecting disk metrics ===")
    (try
      (let [df-result (clojure.java.shell/sh "df" "-BG" "/")
            output (:out df-result)
            lines (clojure.string/split output #"\n")
            data-line (second lines)
            parts (-> data-line
                     (clojure.string/replace #"\s+" " ")
                     (clojure.string/split #" "))
            filesystem (first parts)
            size-str (nth parts 1 "0G")
            used-str (nth parts 2 "0G")
            avail-str (nth parts 3 "0G")
            use-percent-str (nth parts 4 "0%")
            
            ;; Parse values
            size-gb (Integer/parseInt (clojure.string/replace size-str "G" ""))
            used-gb (Integer/parseInt (clojure.string/replace used-str "G" ""))
            avail-gb (Integer/parseInt (clojure.string/replace avail-str "G" ""))
            use-percent (/ (Integer/parseInt (clojure.string/replace use-percent-str "%" "")) 100.0)]
        
        ;; Create and inject events directly
        (let [usage-event {:service "disk.root.usage.percent"
                          :metric use-percent
                          :state (cond (>= use-percent 0.90) "critical"
                                      (>= use-percent 0.80) "warning"
                                      :else "ok")
                          :description (format "Root disk %.1f%% used" (* use-percent 100))
                          :tags ["disk" "usage"]
                          :host "trust-server"
                          :time (unix-time)}
              
              avail-event {:service "disk.root.available.gb"
                          :metric avail-gb
                          :state "ok"
                          :description (format "%dGB available" avail-gb)
                          :tags ["disk" "available"]
                          :host "trust-server"
                          :time (unix-time)}
                          
              used-event {:service "disk.root.used.gb"
                         :metric used-gb
                         :state "ok"  
                         :description (format "%dGB used" used-gb)
                         :tags ["disk" "used"]
                         :host "trust-server"
                         :time (unix-time)}
                         
              total-event {:service "disk.root.total.gb"
                          :metric size-gb
                          :state "ok"
                          :description (format "%dGB total" size-gb)
                          :tags ["disk" "total"]
                          :host "trust-server"
                          :time (unix-time)}]
          
          ;; Process events through the main stream
          (call-rescue usage-event
            (fn [event] 
              ((expired? 300) (index event))))
              
          (call-rescue avail-event
            (fn [event]
              ((expired? 300) (index event))))
              
          (call-rescue used-event  
            (fn [event]
              ((expired? 300) (index event))))
              
          (call-rescue total-event
            (fn [event]
              ((expired? 300) (index event)))))
        
        (info "Disk metrics collected - Usage:" (* use-percent 100) "% Used:" used-gb "GB Available:" avail-gb "GB"))
      
      (catch Exception e
        (error "Error in disk monitoring:" (.getMessage e))))))

;;; ==== END DISK MONITORING ====
