;;; ==== SIMPLIFIED DISK MONITORING ====

;; Disk monitoring function
(defn collect-disk-metrics []
  (try
    (let [df-result (clojure.java.shell/sh "df" "-h" "/")
          output (:out df-result)
          lines (clojure.string/split output #"\n")
          data-line (second lines)
          parts (clojure.string/split data-line #"\s+")
          size-str (nth parts 1 "0G")
          used-str (nth parts 2 "0G") 
          avail-str (nth parts 3 "0G")
          use-percent-str (nth parts 4 "0%")
          use-percent (/ (Integer/parseInt (clojure.string/replace use-percent-str "%" "")) 100.0)
          
          ;; Convert sizes (simplified - assume GB for now)
          size-gb (Double/parseDouble (clojure.string/replace size-str "G" ""))
          used-gb (Double/parseDouble (clojure.string/replace used-str "G" ""))
          avail-gb (Double/parseDouble (clojure.string/replace avail-str "G" ""))]
      
      ;; Send events to streams
      (call-rescue
        (streams
          ;; Disk usage percentage
          (send-event {:service "disk.root.usage.percent"
                      :metric use-percent
                      :state (cond (>= use-percent 0.90) "critical"
                                  (>= use-percent 0.80) "warning"
                                  :else "ok")
                      :description (format "Root disk %.1f%% used" (* use-percent 100))
                      :tags ["disk" "usage"]
                      :host "trust-server"
                      :time (unix-time)})
          
          ;; Available space
          (send-event {:service "disk.root.available.gb"
                      :metric avail-gb
                      :state "ok"
                      :description (format "%.1fGB available" avail-gb)
                      :tags ["disk" "available"]
                      :host "trust-server"
                      :time (unix-time)})
          
          ;; Used space  
          (send-event {:service "disk.root.used.gb"
                      :metric used-gb
                      :state "ok"
                      :description (format "%.1fGB used" used-gb)
                      :tags ["disk" "used"]
                      :host "trust-server"
                      :time (unix-time)})
                      
          ;; Total space
          (send-event {:service "disk.root.total.gb"
                      :metric size-gb
                      :state "ok"
                      :description (format "%.1fGB total" size-gb)
                      :tags ["disk" "total"]
                      :host "trust-server"
                      :time (unix-time)})))
      
      (info "Collected disk metrics - Usage:" (* use-percent 100) "% Used:" used-gb "GB Available:" avail-gb "GB"))
    
    (catch Exception e
      (error "Error collecting disk metrics:" (.getMessage e)))))

;; Schedule disk collection every 60 seconds  
(periodically-expire 60 collect-disk-metrics)

;;; ==== END DISK MONITORING ====
