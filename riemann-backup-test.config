; -*- mode: clojure; -*-
; Riemann configuration with simple backup monitoring test

(require '[clojure.java.io :as io])

(logging/init {:file "/var/log/riemann/riemann.log" :console true})

; Listen on all interfaces
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; REPL server
(repl-server {:host "0.0.0.0"})

; Expire old events every 5 seconds
(periodically-expire 5)

; Simple backup test function
(defn simple-backup-test []
  "Test backup monitoring"
  (info "=== BACKUP MONITORING TEST ===")
  (try
    (let [backup-dir "/home/tmb/alfresco-backups"
          backup-files (->> (file-seq (io/file backup-dir))
                           (filter #(.isFile %))
                           (filter #(or (.endsWith (.getName %) ".tar.gz")
                                       (.endsWith (.getName %) ".sql")
                                       (.endsWith (.getName %) ".tar"))))]
      (info "Found" (count backup-files) "backup files")
      (doseq [f (take 3 backup-files)]
        (info "File:" (.getName f) "Size:" (.length f) "Modified:" (.lastModified f)))
      
      ; Create test events
      [{:service "backup.test.file_count"
        :metric (count backup-files)
        :state "ok"
        :host "trust-server"
        :time (unix-time)}])
    
    (catch Exception e
      (error "Backup test failed:" (.getMessage e))
      [{:service "backup.test.error"
        :metric 0
        :state "critical"
        :host "trust-server"
        :time (unix-time)}])))

; Immediate test on startup
(info "Starting backup monitoring test...")
(simple-backup-test)

; Test every minute  
(let [test-task (fn [] (simple-backup-test))
      scheduler (java.util.concurrent.Executors/newScheduledThreadPool 1)]
  (info "Scheduling backup test every 60 seconds...")
  (.scheduleWithFixedDelay scheduler test-task 10 60 java.util.concurrent.TimeUnit/SECONDS))

; Main index
(let [index (index)]
  (streams
    (default :ttl 60
      ; Log all incoming events
      #(info "EVENT:" (:service %) "=" (:metric %) "from" (:host %))
      index)))
