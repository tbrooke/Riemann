; -*- mode: clojure; -*-
; Enhanced Riemann configuration with email support

(logging/init {:file "/var/log/riemann/riemann.log" :console true})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; REPL server for interactive debugging
(repl-server {:host "0.0.0.0"})

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

; === EMAIL CONFIGURATION ===
; Configure your SMTP settings here
(def email-config
  {:smtp-host "smtp.gmail.com"  ; or your SMTP server
   :smtp-port 587
   :smtp-user "your-email@gmail.com"
   :smtp-pass "your-app-password"  ; Use app password for Gmail
   :from "riemann@trustblocks.com"
   :enabled false})  ; Set to true when configured

(defn send-email [to subject body]
  "Send email alert via SMTP"
  (if (:enabled email-config)
    (fn [event]
      (try
        ; This is a placeholder - would use postal library in real implementation
        (info "EMAIL ALERT:")
        (info "  To:" to)
        (info "  Subject:" subject)
        (info "  Body:" body)
        (info "  Event:" (:service event) (:host event) (:metric event))
        ; In production: (postal/send-message email-config {:to to :subject subject :body body})
        (catch Exception e
          (error "Failed to send email:" (.getMessage e)))))
    (fn [event]
      (info "EMAIL DISABLED - would send to" to ":" (:service event) (:host event)))))

; === ALERTING FUNCTIONS ===
(defn critical-alert [service-name]
  (send-email "admin@trustblocks.com" 
              (str "CRITICAL: " service-name " Alert")
              (str "Service " service-name " requires immediate attention")))

(defn warning-alert [service-name] 
  (send-email "admin@trustblocks.com"
              (str "WARNING: " service-name " Alert") 
              (str "Service " service-name " is experiencing issues")))

; Keep events in the index for 60 seconds by default.
(let [index (index)]
  
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      
      ; Log all events to see what's coming in
      #(info "Event:" (:service %) (:metric %) (:host %) (:state %))
      
      ; Index all events
      index
      
      ; === CRITICAL ALERTS ===
      
      ; Service down alerts
      (where (and (state "critical")
                  (service #"postgres.*|alfresco.*|docker.*"))
        #(error "CRITICAL SERVICE DOWN:" (:host %) (:service %))
        (critical-alert "Service Down"))
      
      ; Extreme resource usage
      (where (and (or (and (service "cpu") (> metric 0.95))
                      (and (service "memory") (> metric 0.95))
                      (and (service #"disk.*") (> metric 0.95)))
                  (state "critical"))
        #(error "CRITICAL RESOURCE USAGE:" (:host %) (:service %) (:metric %))
        (critical-alert "Resource Exhaustion"))
      
      ; === WARNING ALERTS ===
      
      ; High CPU usage
      (where (and (service "cpu")
                  (> metric 0.8)
                  (< metric 0.95))
        #(warn "High CPU usage:" (:host %) (:metric %))
        (warning-alert "High CPU Usage"))
      
      ; High memory usage  
      (where (and (service "memory")
                  (> metric 0.85)
                  (< metric 0.95))
        #(warn "High memory usage:" (:host %) (:metric %))
        (warning-alert "High Memory Usage"))
      
      ; High disk usage
      (where (and (service #"disk.*")
                  (> metric 0.9)
                  (< metric 0.95))
        #(warn "High disk usage:" (:host %) (:service %) (:metric %))
        (warning-alert "High Disk Usage"))
      
      ; High load average
      (where (and (service "load")
                  (> metric 2.0))
        #(warn "High load average:" (:host %) (:metric %))
        (warning-alert "High Load Average"))
      
      ; === SERVICE MONITORING ===
      
      ; PostgreSQL monitoring
      (where (service #"postgres.*")
        (by [:host :service]
          (coalesce 2
            ; Monitor connection count
            (where (and (service "postgres connections")
                        (> metric 80))
              #(warn "High PostgreSQL connections:" (:host %) (:metric %))
              (warning-alert "PostgreSQL High Connections")))))
      
      ; Alfresco monitoring
      (where (service #"alfresco.*")
        (by [:host :service]
          (coalesce 2
            ; Monitor response time
            (where (and (service "alfresco response-time")
                        (> metric 5000))
              #(warn "Slow Alfresco response:" (:host %) (:metric %) "ms")
              (warning-alert "Alfresco Slow Response")))))
      
      ; === INFORMATIONAL LOGGING ===
      
      ; GraphRAG/LLM monitoring (info level)
      (where (service #"llm.*|ollama.*|graphrag.*")
        (by [:host :service]
          (coalesce 2
            ; Monitor LLM memory usage (info only)
            (where (and (service #".*memory.*")
                        (> metric 4000000000)) ; 4GB threshold for info
              #(info "LLM memory usage:" (:host %) (:service %) (:metric %)))
            
            ; Monitor LLM response times (warn at 30s)
            (where (and (service #".*response-time.*")
                        (> metric 30000))
              #(warn "Slow LLM response:" (:host %) (:service %) (:metric %) "ms")
              (warning-alert "LLM Slow Response")))))
      
      ; === HEALTH REPORTING ===
      
      ; Create health summary every minute
      (where (service "cpu")
        (by :host
          (rate 60
            (with {:service "health-summary" :description "System health check"}
              #(info "Health summary for" (:host %) "- CPU OK")
              index))))
      
      ; === EXPIRED EVENTS ===
      (expired
        #(warn "Event expired - possible monitoring gap:" (:service %) (:host %))))))

; === DASHBOARD DATA ===
; Create aggregated metrics for dashboards
(let [dashboard-index (index)]
  (streams
    ; Calculate cluster-wide averages
    (where (service #"cpu|memory|load")
      (by :service
        (coalesce 10  ; Wait for up to 10 events
          (smap folds/mean
            (with {:host "cluster" :service (str (:service event) "-avg")}
              dashboard-index)))))
    
    ; Service availability summary
    (where (service #".*status")
      (by :service
        (coalesce 5
          (smap #(if (> (:metric %) 0) 1 0)  ; Convert to 1/0
            (with {:host "cluster" :service (str (:service event) "-availability")}
              dashboard-index)))))))
